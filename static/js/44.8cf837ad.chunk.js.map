{"version":3,"file":"static/js/44.8cf837ad.chunk.js","mappings":"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","sources":["redux/contacts/contacts-selector.js","components/Form/Form.js","redux/filter/filter-selectors.js","components/Filter/Filter.js","components/Loader/Loader.js","components/ContactList/ContactList.js","components/Contacts.jsx"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit'; \n\nexport const getContacts = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\nexport const selectFilter = store => store.filter;\n\nexport const getFilteredContacts = createSelector(\n  [getContacts, selectFilter],\n  (contacts, filter) => {  \n    if (!filter) {\n      return contacts;\n    }\n\n    const normalizeFilter = filter.toLowerCase();\n    const filteredContacts = contacts.filter(({ name, number }) => {\n      const normalizeName = name.toLowerCase();\n      const result = normalizeName.includes(normalizeFilter) || number.includes(normalizeFilter);\n      return result;\n    });\n  \n    return filteredContacts;\n  });\n","import React, { useState } from \"react\";\nimport { nanoid } from 'nanoid';\nimport './form.css';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { addContact } from \"redux/contacts/contacts-operations\";\nimport { getContacts } from \"redux/contacts/contacts-selector\";\nimport { Input, Button, FormLabel, useToast, VStack } from '@chakra-ui/react';\n\nconst Form = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const contacts = useSelector(getContacts);\n  const dispatch = useDispatch();\n  const toast = useToast();\n\n  const nameId = nanoid();\n  const numberId = nanoid();\n\n  const handleInputChange = event => {\n    const { name, value } = event.currentTarget;\n\n    switch (name) {\n      case 'name':\n        return setName(value);\n      case 'number':\n        return setNumber(value);\n      default:\n        return;\n    }\n  };\n\n  const isDuplicate = ({ name, number }) => {\n    const resullt = contacts.find(item => item.name === name || item.number  === number);\n    return resullt;\n  }\n\n  const handleSubmit = (evt) => {\n    evt.preventDefault();\n\n    if (isDuplicate({ name, number })) {\n\n      toast({\n        title: `Contact with name ${name} or number ${number} is already in list`,\n        status: 'error',\n        duration: 5000,\n        position: 'top',\n        isClosable: true\n      })\n      return;\n    }\n\n    const action = addContact({ name, number });\n    dispatch(action);\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <VStack borderColor='gray.100'\n      borderWidth='2px'\n      padding='4'\n      borderRadius='lg'\n      width='100%'\n      maxW={{ base: '90vw', sm: '80vw', lg: '50vw', xl: '40vw' }}\n      alignItems='center'>\n   <form onSubmit={handleSubmit} className='form1'>\n     <FormLabel htmlFor={nameId} color='orange.500' ml='18'>Name</FormLabel>\n        <Input\n          type=\"text\"\n          name=\"name\" //name cовпадает с полем в state.name!!\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          className=\"input_field\"\n          value={name}\n          onChange={handleInputChange}\n          id={nameId} />\n      <FormLabel htmlFor={numberId} color='orange.500' ml='18'>Number</FormLabel>\n        <Input\n          type=\"tel\"\n          name=\"number\" //name cовпадает с полем в state.name!!\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n          className=\"input_field\"\n          value={number}\n          onChange={handleInputChange}\n          id={numberId} />\n        <Button type=\"submit\" colorScheme=\"orange\" px=\"16\" ml='18' mr='auto'>Add contact</Button>\n      </form>\n      </VStack>\n  );\n}\n\nexport default Form;\n\n","export const getFilter = state => state.filter;","import { nanoid } from 'nanoid';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getFilter } from 'redux/filter/filter-selectors';\nimport { setFilter } from 'redux/filter/filter-slice';\nimport { HStack, Input } from '@chakra-ui/react';\n\nexport const Filter = () => {\n    const filter = useSelector(getFilter);\n    const dispatch = useDispatch();\n    const searchContactId = nanoid();\n\n    const filterInput = evt => {\n        const { value } = evt.target;\n        dispatch(setFilter(value));\n    }\n\n    return (\n        <HStack>\n            <Input\n                type=\"text\"\n                name=\"filter\"\n                value={filter}\n                id={searchContactId}\n                onChange={filterInput}\n                placeholder='Search'\n            />\n        </HStack>\n    )\n};\n","import { RotatingLines } from 'react-loader-spinner';\nimport './Loader.css'\n\nexport const Loader = () => {\n  return (\n    <div className=\"loader-container\">\n      <RotatingLines\n        strokeColor=\"grey\"\n        strokeWidth=\"5\"\n        animationDuration=\"0.75\"\n        width=\"32\"\n        visible={true}\n      />\n    </div>\n  );\n};","import './contact.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getFilteredContacts } from 'redux/contacts/contacts-selector';\nimport { deleteContact } from 'redux/contacts/contacts-operations';\nimport { HStack, VStack, Text, IconButton, StackDivider, Spacer } from '@chakra-ui/react';\nimport { FaTrash } from 'react-icons/fa';\n\nexport const ContactList = () => {\n    \n    const filteredContacts = useSelector(getFilteredContacts);\n    const dispatch = useDispatch();\n\n    const onRemoveContact = (id) => {\n        const action = deleteContact(id);    \n        dispatch(action);\n    }\n    \n    const elements = filteredContacts.map(({ name, number, id }) => {  \n        return <HStack key={id}>\n            <Text>{name}: {number}</Text>\n            <Spacer />\n            <IconButton icon={<FaTrash />} onClick={() => onRemoveContact(id)} isRound='true'/>\n        </HStack>\n    }\n    \n    )\n    return (\n        <VStack\n            divider={<StackDivider />}\n            borderColor='gray.100'\n            borderWidth='2px'\n            padding='4'\n            borderRadius='lg'\n            width='100%'\n            maxW={{ base: '90vw', sm: '80vw', lg: '50vw', xl: '40vw' }}\n            alignItems=\"stretch\"\n        >{elements}</VStack>\n    )\n}","import React from \"react\";\nimport Form from \"./Form/Form\";\nimport { Filter } from './Filter/Filter';\nimport { Loader } from \"./Loader/Loader\";\nimport { ContactList } from './ContactList/ContactList';\nimport { useEffect } from \"react\";\nimport { fetchContacts } from \"redux/contacts/contacts-operations\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getFilter } from \"redux/filter/filter-selectors\";\nimport { getFilteredContacts, selectIsLoading, selectError } from \"redux/contacts/contacts-selector\";\nimport { Heading} from '@chakra-ui/react';\nimport { VStack, Badge } from '@chakra-ui/react';\n\nconst Contacts = () => {\n\n  const contacts = useSelector(getFilteredContacts);\n  const filter = useSelector(getFilter);\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  const dispatch = useDispatch();\n\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch])\n\n  return (\n    <>\n      <VStack>\n        <Heading\n          mb='8'\n          fontWeight='extrabold'\n          size='2xl'\n          bgGradient='linear(to-r, gray.500, orange.300, pink.300)'\n          bgClip='text'\n        >Phonebook</Heading>\n      </VStack>\n      <VStack>\n        <Form />\n      </VStack>\n\n      <VStack>\n        <Heading\n          mt='20'\n          mb='8'\n          fontWeight='extrabold'\n          size='2xl'\n          bgGradient='linear(to-r, gray.500, orange.300, pink.300)'\n          bgClip='text'> Contacts</Heading>\n\n\n        {contacts?.length === 0 && filter === '' && (<Badge p='3' borderRadius='lg' variant='outline'>\n          The list is empty. Try to add contact</Badge>)}\n        {contacts?.length > 0 && (<><Filter /> <ContactList /> </>)}\n        {filter !== '' && contacts?.length === 0 && (<><Filter /> <Badge p='3' borderRadius='lg' variant='outline'>\n          The filtered list is empty, no contacts in list</Badge></>)}\n        {isLoading && !error && <Loader />}\n\n        {error && <p>Oooops... Something went wrong</p>}\n        </VStack>\n      </>\n    )\n}\n\nexport default Contacts;\n"],"names":["getContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","getFilteredContacts","createSelector","store","filter","normalizeFilter","toLowerCase","name","number","includes","useState","setName","setNumber","useSelector","dispatch","useDispatch","toast","useToast","nameId","nanoid","numberId","handleInputChange","event","currentTarget","value","reset","borderColor","borderWidth","padding","borderRadius","width","maxW","base","sm","lg","xl","alignItems","onSubmit","evt","preventDefault","find","item","isDuplicate","title","status","duration","position","isClosable","action","addContact","className","htmlFor","color","ml","I","type","pattern","required","onChange","id","colorScheme","px","mr","getFilter","Filter","searchContactId","target","setFilter","placeholder","Loader","strokeColor","strokeWidth","animationDuration","visible","ContactList","filteredContacts","elements","map","icon","onClick","deleteContact","onRemoveContact","isRound","divider","useEffect","fetchContacts","mb","fontWeight","size","bgGradient","bgClip","mt","length","p","variant"],"sourceRoot":""}